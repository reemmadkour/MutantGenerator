import os 
from subprocess import Popen, PIPE
vectors = [0,1,2]
arrogresult=list()
arrResultMutant=list()
dictOutput={}
for k in range(0,len(vectors)):
	print("Testing Vector input b="+str(vectors[k])+"\n")
	output = Popen(["python", "program.py", str(vectors[k])],stdout=PIPE)
	(response,error) = output.communicate()
	arrogresult=response.decode('utf-8')
	print("original: "+str(arrogresult))
	for i in range(1,12):
		output = Popen(["python", "newprogram"+str(i)+".py", str(vectors[k])],stdout=PIPE)
		(response,error) = output.communicate()
		#print((response.decode('utf-8')))
		# arrResultMutant.append(response.decode('utf-8'))
		result=response.decode('utf-8')
		if(result!=arrogresult):
			arrResultMutant.append("mutant  killed:" + str(result)+ "by test vector: "+ str(vectors[k]) +"\n")
		else:
			arrResultMutant.append("mutant not  killed:" + str(result)+ "by test vector: "+ str(vectors[k]) +"\n")
		dictOutput[str(i)] = arrResultMutant

#write to a new mutant list file sequentially
#f= open("new_mutantlib.txt","w+")
#print(dictOutput)
for i in range(1,12):
	with open("mutantlib.txt") as f:
		with open("new_mutantlib.txt", "w") as f1:
			for line in f:
				if("Type" in line): 
					f1.write(line) 
					for n in range(0,33):
						f1.write(dictOutput.get(str(i))[n])
				else: 
					f1.write(line)      
